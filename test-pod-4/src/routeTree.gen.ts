/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ControlImport } from './routes/control'

// Create Virtual Routes

const StartLazyImport = createFileRoute('/start')()
const IndexLazyImport = createFileRoute('/')()
const ControlNewmixerLazyImport = createFileRoute('/control/newmixer')()
const ControlMixerLazyImport = createFileRoute('/control/mixer')()

// Create/Update Routes

const StartLazyRoute = StartLazyImport.update({
  path: '/start',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/start.lazy').then((d) => d.Route))

const ControlRoute = ControlImport.update({
  path: '/control',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ControlNewmixerLazyRoute = ControlNewmixerLazyImport.update({
  path: '/newmixer',
  getParentRoute: () => ControlRoute,
} as any).lazy(() =>
  import('./routes/control/newmixer.lazy').then((d) => d.Route),
)

const ControlMixerLazyRoute = ControlMixerLazyImport.update({
  path: '/mixer',
  getParentRoute: () => ControlRoute,
} as any).lazy(() => import('./routes/control/mixer.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/control': {
      id: '/control'
      path: '/control'
      fullPath: '/control'
      preLoaderRoute: typeof ControlImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      id: '/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof StartLazyImport
      parentRoute: typeof rootRoute
    }
    '/control/mixer': {
      id: '/control/mixer'
      path: '/mixer'
      fullPath: '/control/mixer'
      preLoaderRoute: typeof ControlMixerLazyImport
      parentRoute: typeof ControlImport
    }
    '/control/newmixer': {
      id: '/control/newmixer'
      path: '/newmixer'
      fullPath: '/control/newmixer'
      preLoaderRoute: typeof ControlNewmixerLazyImport
      parentRoute: typeof ControlImport
    }
  }
}

// Create and export the route tree

interface ControlRouteChildren {
  ControlMixerLazyRoute: typeof ControlMixerLazyRoute
  ControlNewmixerLazyRoute: typeof ControlNewmixerLazyRoute
}

const ControlRouteChildren: ControlRouteChildren = {
  ControlMixerLazyRoute: ControlMixerLazyRoute,
  ControlNewmixerLazyRoute: ControlNewmixerLazyRoute,
}

const ControlRouteWithChildren =
  ControlRoute._addFileChildren(ControlRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/mixer': typeof ControlMixerLazyRoute
  '/control/newmixer': typeof ControlNewmixerLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/mixer': typeof ControlMixerLazyRoute
  '/control/newmixer': typeof ControlNewmixerLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/mixer': typeof ControlMixerLazyRoute
  '/control/newmixer': typeof ControlNewmixerLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/control'
    | '/start'
    | '/control/mixer'
    | '/control/newmixer'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/control' | '/start' | '/control/mixer' | '/control/newmixer'
  id:
    | '__root__'
    | '/'
    | '/control'
    | '/start'
    | '/control/mixer'
    | '/control/newmixer'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ControlRoute: typeof ControlRouteWithChildren
  StartLazyRoute: typeof StartLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ControlRoute: ControlRouteWithChildren,
  StartLazyRoute: StartLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/control",
        "/start"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/control": {
      "filePath": "control.tsx",
      "children": [
        "/control/mixer",
        "/control/newmixer"
      ]
    },
    "/start": {
      "filePath": "start.lazy.tsx"
    },
    "/control/mixer": {
      "filePath": "control/mixer.lazy.tsx",
      "parent": "/control"
    },
    "/control/newmixer": {
      "filePath": "control/newmixer.lazy.tsx",
      "parent": "/control"
    }
  }
}
ROUTE_MANIFEST_END */
