/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ControlImport } from './routes/control'
import { Route as ControlOldmixerImport } from './routes/control/oldmixer'
import { Route as ControlMixerImport } from './routes/control/mixer'
import { Route as ControlControlsImport } from './routes/control/controls'
import { Route as ControlControlsVideoImport } from './routes/control/controls/video'
import { Route as ControlControlsAudioImport } from './routes/control/controls/audio'

// Create Virtual Routes

const StartLazyImport = createFileRoute('/start')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const StartLazyRoute = StartLazyImport.update({
  path: '/start',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/start.lazy').then((d) => d.Route))

const ControlRoute = ControlImport.update({
  path: '/control',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ControlOldmixerRoute = ControlOldmixerImport.update({
  path: '/oldmixer',
  getParentRoute: () => ControlRoute,
} as any)

const ControlMixerRoute = ControlMixerImport.update({
  path: '/mixer',
  getParentRoute: () => ControlRoute,
} as any)

const ControlControlsRoute = ControlControlsImport.update({
  path: '/controls',
  getParentRoute: () => ControlRoute,
} as any)

const ControlControlsVideoRoute = ControlControlsVideoImport.update({
  path: '/video',
  getParentRoute: () => ControlControlsRoute,
} as any)

const ControlControlsAudioRoute = ControlControlsAudioImport.update({
  path: '/audio',
  getParentRoute: () => ControlControlsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/control': {
      id: '/control'
      path: '/control'
      fullPath: '/control'
      preLoaderRoute: typeof ControlImport
      parentRoute: typeof rootRoute
    }
    '/start': {
      id: '/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof StartLazyImport
      parentRoute: typeof rootRoute
    }
    '/control/controls': {
      id: '/control/controls'
      path: '/controls'
      fullPath: '/control/controls'
      preLoaderRoute: typeof ControlControlsImport
      parentRoute: typeof ControlImport
    }
    '/control/mixer': {
      id: '/control/mixer'
      path: '/mixer'
      fullPath: '/control/mixer'
      preLoaderRoute: typeof ControlMixerImport
      parentRoute: typeof ControlImport
    }
    '/control/oldmixer': {
      id: '/control/oldmixer'
      path: '/oldmixer'
      fullPath: '/control/oldmixer'
      preLoaderRoute: typeof ControlOldmixerImport
      parentRoute: typeof ControlImport
    }
    '/control/controls/audio': {
      id: '/control/controls/audio'
      path: '/audio'
      fullPath: '/control/controls/audio'
      preLoaderRoute: typeof ControlControlsAudioImport
      parentRoute: typeof ControlControlsImport
    }
    '/control/controls/video': {
      id: '/control/controls/video'
      path: '/video'
      fullPath: '/control/controls/video'
      preLoaderRoute: typeof ControlControlsVideoImport
      parentRoute: typeof ControlControlsImport
    }
  }
}

// Create and export the route tree

interface ControlControlsRouteChildren {
  ControlControlsAudioRoute: typeof ControlControlsAudioRoute
  ControlControlsVideoRoute: typeof ControlControlsVideoRoute
}

const ControlControlsRouteChildren: ControlControlsRouteChildren = {
  ControlControlsAudioRoute: ControlControlsAudioRoute,
  ControlControlsVideoRoute: ControlControlsVideoRoute,
}

const ControlControlsRouteWithChildren = ControlControlsRoute._addFileChildren(
  ControlControlsRouteChildren,
)

interface ControlRouteChildren {
  ControlControlsRoute: typeof ControlControlsRouteWithChildren
  ControlMixerRoute: typeof ControlMixerRoute
  ControlOldmixerRoute: typeof ControlOldmixerRoute
}

const ControlRouteChildren: ControlRouteChildren = {
  ControlControlsRoute: ControlControlsRouteWithChildren,
  ControlMixerRoute: ControlMixerRoute,
  ControlOldmixerRoute: ControlOldmixerRoute,
}

const ControlRouteWithChildren =
  ControlRoute._addFileChildren(ControlRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/controls': typeof ControlControlsRouteWithChildren
  '/control/mixer': typeof ControlMixerRoute
  '/control/oldmixer': typeof ControlOldmixerRoute
  '/control/controls/audio': typeof ControlControlsAudioRoute
  '/control/controls/video': typeof ControlControlsVideoRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/controls': typeof ControlControlsRouteWithChildren
  '/control/mixer': typeof ControlMixerRoute
  '/control/oldmixer': typeof ControlOldmixerRoute
  '/control/controls/audio': typeof ControlControlsAudioRoute
  '/control/controls/video': typeof ControlControlsVideoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/control': typeof ControlRouteWithChildren
  '/start': typeof StartLazyRoute
  '/control/controls': typeof ControlControlsRouteWithChildren
  '/control/mixer': typeof ControlMixerRoute
  '/control/oldmixer': typeof ControlOldmixerRoute
  '/control/controls/audio': typeof ControlControlsAudioRoute
  '/control/controls/video': typeof ControlControlsVideoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/control'
    | '/start'
    | '/control/controls'
    | '/control/mixer'
    | '/control/oldmixer'
    | '/control/controls/audio'
    | '/control/controls/video'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/control'
    | '/start'
    | '/control/controls'
    | '/control/mixer'
    | '/control/oldmixer'
    | '/control/controls/audio'
    | '/control/controls/video'
  id:
    | '__root__'
    | '/'
    | '/control'
    | '/start'
    | '/control/controls'
    | '/control/mixer'
    | '/control/oldmixer'
    | '/control/controls/audio'
    | '/control/controls/video'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ControlRoute: typeof ControlRouteWithChildren
  StartLazyRoute: typeof StartLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ControlRoute: ControlRouteWithChildren,
  StartLazyRoute: StartLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/control",
        "/start"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/control": {
      "filePath": "control.tsx",
      "children": [
        "/control/controls",
        "/control/mixer",
        "/control/oldmixer"
      ]
    },
    "/start": {
      "filePath": "start.lazy.tsx"
    },
    "/control/controls": {
      "filePath": "control/controls.tsx",
      "parent": "/control",
      "children": [
        "/control/controls/audio",
        "/control/controls/video"
      ]
    },
    "/control/mixer": {
      "filePath": "control/mixer.tsx",
      "parent": "/control"
    },
    "/control/oldmixer": {
      "filePath": "control/oldmixer.tsx",
      "parent": "/control"
    },
    "/control/controls/audio": {
      "filePath": "control/controls/audio.tsx",
      "parent": "/control/controls"
    },
    "/control/controls/video": {
      "filePath": "control/controls/video.tsx",
      "parent": "/control/controls"
    }
  }
}
ROUTE_MANIFEST_END */
